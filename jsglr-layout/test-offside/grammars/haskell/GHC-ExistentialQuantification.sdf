module GHC-ExistentialQuantification
	
	imports Haskell-Syntax
	imports GHC-ExplicitForAll
	
	exports
		
		context-free syntax
			Context Constr -> Constr {cons("ExistentialConstrs"), avoid}
			%% Avoid ambiguities with RecordConstr with production
			%% Context? Con RecordFields -> Constr, the context should be parsed as context of the existential constr
			Forall Context Con RecordFields -> ExConstr {reject}
			
		context-free priorities
			{Forall Constr -> ExConstr {cons("ExistentialConstr")}
			 ExConstr -> Constr
			 Forall Context Constr -> ExContextConstr {cons("ExistentialContextConstr")}
			 ExContextConstr -> Constr}
			> Context Constr -> Constr
			