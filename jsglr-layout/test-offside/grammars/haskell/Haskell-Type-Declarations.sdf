module Haskell-Type-Declarations

imports
	Haskell-Types
	Haskell-Patterns

exports
  context-free syntax
    "type" Type "=" CType	  -> Topdecl {cons("TypeDecl")}
    "data" Context? Type "=" Constrs Deriving 	  -> Decl {cons("Data")}
    "newtype" Context? Type "=" Newconstr Deriving -> Decl {cons("NewTypeDecl")}

  context-free syntax
    "deriving" Qtycls 		     	-> Deriving {cons("Derive")}
    "deriving" "(" ")" 		     	-> Deriving {cons("NoDeriving")}
    "deriving" "(" {Qtycls ","}+ ")" 	-> Deriving {cons("Derive")}
    				     	-> Deriving {cons("NoDeriving")}
    				     	
  context-free syntax
    {Constr GuardSymbol}+                       -> Constrs

  context-free syntax
    Conid Satype*       -> Constr {cons("ConstrDecl")}
    Sbtype Conop Sbtype -> Constr {cons("InfixConstr")}

    Conid Type 			 	 -> Newconstr
    Conid LabeledConstr 	 -> Newconstr
    "{" Var "::" Type "}" -> LabeledConstr {cons("LabeledConstr"), ignore-layout}
   
    AType 				 -> Satype
    "!" AType 				 -> Satype
    Type     				 -> Sbtype
    "!" Type 				 -> Sbtype
 
