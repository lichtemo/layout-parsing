module GHC-Arrows

imports Haskell-Expressions
imports Haskell-Patterns
imports Haskell-Statements
imports Haskell-Operators

exports
	
	lexical syntax
		%% Operator Definitions
		
		"-<"	-> LeftArrowTailOp
		">-"	-> RightArrowTailOp
		"-<<"	-> DoubleLeftArrowTailOp
		">>-"	-> DoubleRightArrowTailOp
		
		LeftArrowTailOp 		-> ReservedOp
		RightArrowTailOp		-> ReservedOp
		DoubleLeftArrowTailOp	-> ReservedOp
		DoubleRightArrowTailOp	-> ReservedOp
		
	lexical restrictions
		LeftArrowTailOp
		RightArrowTailOp
		DoubleLeftArrowTailOp
		DoubleRightArrowTailOp -/-[\!\#\%\&\*\+\.\/] \/ [\<\=\>\?\@\\\^\|\-\~] \/ [\$]	

context-free syntax
  "proc" APat RightArrowOp ArrCommand -> Exp {ast("ArrProcedure(<1>,<3>)")}

  Exp LeftArrowTailOp Exp -> ArrCommand {ast("ArrFirst(<1>,<3>)")}
  Exp DoubleLeftArrowTailOp Exp -> ArrCommand {ast("ArrHigher(<1>,<3>)")}
  
  "\\" Fargs RightArrowOp ArrCommand -> ArrCommand {ast("ArrAbs(<1>,<3>)")}
  "let" Declbinds "in" ArrCommand -> ArrCommand {cons("ArrLet")} 
  "if" Exp "then" ArrCommand "else" ArrCommand -> ArrCommand {cons("ArrIf")}
  "case" Exp "of" ArrAltList -> ArrCommand	{cons("ArrCase"), longest-match}
  "do" ArrStmtList -> ArrCommand {cons("ArrDo"), longest-match}

  ArrCommand Exp -> ArrCommand {cons("ArrAppBin"),left}
  
  "(" ArrCommand ")" -> ArrCommand {bracket}
  "(|" Exp ArrCommand+ "|)" -> ArrCommand {cons("ArrForm")}
  ArrCommand Qop ArrCommand -> ArrCommand {cons("ArrOpApp"), right}

context-free priorities
    ArrCommand Exp -> ArrCommand
  > ArrCommand Qop ArrCommand -> ArrCommand

context-free priorities
    ArrCommand Exp -> ArrCommand
  	> {
        "\\" Fargs RightArrowOp ArrCommand -> ArrCommand
        "let" Declbinds "in" ArrCommand -> ArrCommand 
        "if" Exp "then" ArrCommand "else" ArrCommand -> ArrCommand
        "case" Exp "of" AltList -> ArrCommand
        "do" ArrStmtList -> ArrCommand

        Exp LeftArrowTailOp Exp -> ArrCommand
        Exp DoubleLeftArrowTailOp Exp -> ArrCommand
      }

context-free priorities
    ArrCommand Qop ArrCommand -> ArrCommand
  <0>
  	> {
        "\\" Fargs RightArrowOp ArrCommand -> ArrCommand
        "let" Declbinds "in" ArrCommand -> ArrCommand 
        "if" Exp "then" ArrCommand "else" ArrCommand -> ArrCommand
    }

context-free priorities
  	Exp Exp -> Exp
  	> 
      {
        "proc" APat RightArrowOp ArrCommand -> Exp {ast("ArrProcedure(<1>,<3>)")}
        Exp LeftArrowTailOp Exp -> ArrCommand
        Exp DoubleLeftArrowTailOp Exp -> ArrCommand
      }

context-free priorities
    Exp Qop Exp -> Exp
  	<0> >
    "proc" APat RightArrowOp ArrCommand -> Exp {ast("ArrProcedure(<1>,<3>)")}

context-free priorities
      {
        Exp LeftArrowTailOp Exp -> ArrCommand
        Exp DoubleLeftArrowTailOp Exp -> ArrCommand
      }
    <0>
  	> {
        "\\" Fargs RightArrowOp Exp -> Exp
       "let" Declbinds "in" Exp -> Exp 
       "if" AnyExp "then" AnyExp "else" Exp -> Exp
       "do" StmtList -> Exp {cons("Do"), longest-match}
       "case" AnyExp "of" AltList          -> Exp  	{cons("Case"), longest-match}
      }
      
	context-free syntax
 		"let" Declbinds -> ArrStmt {cons("ArrLetStmt")}
		Pat LeftArrowOp ArrCommand -> ArrStmt {ast("ArrBindStmt(<1>,<3>)")}
		ArrCommand -> ArrStmt {cons("ArrCmdStmt")}

	context-free syntax
		"{" ArrExplStmtList "}" -> ArrStmtList {cons("ArrStmtList"), ignore-layout}
		ArrImplStmtList   -> ArrStmtList {cons("ArrStmtList")}

	context-free syntax
		ArrStmt -> ArrExplStmtList
		ArrStmt ";" ArrExplStmtList -> ArrExplStmtList {cons("ArrStmtSeq")}

		ArrStmt -> ArrImplStmt {layout("1.first.col < 1.left.col")}

		ArrImplStmt -> ArrImplStmtList
		ArrImplStmt ArrImplStmtList -> ArrImplStmtList {cons("ArrStmtSeq"), layout("1.first.col == 2.first.col")}
	
	context-free syntax
		Pat RightArrowOp ArrCommand MaybeWhere -> ArrAlt {ast("ArrAlt(<1>,<3>,<4>)")}

	context-free syntax
		ArrNoOffsideAltBlock -> ArrAltList {cons("AltList")}
		ArrOffsideAltList   -> ArrAltList {cons("AltList")}

		"{" ArrNoOffsideAltList "}"  -> ArrNoOffsideAltBlock {bracket, ignore-indent}

	context-free syntax
		ArrAlt -> ArrNoOffsideAltList
		ArrAlt ";" ArrNoOffsideAltList -> ArrNoOffsideAltList {cons("ArrAltSeq")}

		ArrAlt -> ArrOffsideAlt {layout(gt(col(left(1)), col(first(1))))}

		ArrOffsideAlt -> ArrOffsideAltList
		ArrOffsideAlt ArrOffsideAltList -> ArrOffsideAltList {cons("ArrAltSeq"), layout(eq(col(first(1)), col(first(2))))}
	
	
	lexical syntax
		"proc" 	-> ReservedId0
		"rec"	-> ReservedId0
		
	lexical restrictions
		"proc" "rec" -/- [a-zA-Z0-9\'\_]