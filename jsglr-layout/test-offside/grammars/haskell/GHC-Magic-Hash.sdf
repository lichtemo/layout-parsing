module GHC-Magic-Hash
imports Haskell-Identifiers

imports Haskell-Numbers

imports Haskell-Strings

exports
  lexical syntax
    LowerCase AnyLetter* ( [\35] )+ -> VARID {longest-match}
    ( [\95] ) AnyLetter+ ( [\35] )+ -> VARID {longest-match}
    UpperCase AnyLetter* ( [\35] )+ -> CONID {longest-match}

  lexical restrictions
    VARID -/- [\35] . ( ( [\0-\6] | ( ( [\8-\40] | [\42-\127] ) ) ) )
    CONID -/- [\35] . ( ( [\0-\6] | ( ( [\8-\40] | [\42-\127] ) ) ) )

  syntax
    

  context-free syntax
    

  lexical syntax
    Decimal                                      -> INTEGER-HASH  
    ( [\48] ) ( ( [\79] | [\111] ) ) Octal       -> INTEGER-HASH  
    ( [\48] ) ( ( [\88] | [\120] ) ) Hexadecimal -> INTEGER-HASH  
    Decimal "." Decimal                          -> FLOAT-HASH    
    Decimal Exponent                             -> RATIONAL-HASH 
    Decimal "." Decimal Exponent                 -> RATIONAL-HASH 

  syntax
    "'" CharChar "'" "#"      -> <Char-HASH-CF>    {cons("CharHash")}
    "\"" StringChar* "\"" "#" -> <String-HASH-CF>  {cons("StringHash")}
    <INTEGER-HASH-LEX> "#"    -> <Integer-HASH-CF> {cons("IntegerHash")}
    <FLOAT-HASH-LEX> "#"      -> <Float-HASH-CF>   {cons("FloatHash")}
    <RATIONAL-HASH-LEX> "#"   -> <Float-HASH-CF>   {cons("FloatHash")}

  context-free syntax
    Char-HASH    -> Literal 
    String-HASH  -> Literal 
    Integer-HASH -> Literal 
    Float-HASH   -> Literal 

  lexical restrictions
    INTEGER -/- [\35]
    FLOAT -/- [\35]
    RATIONAL -/- [\35]

  context-free restrictions
    Char -/- [\35]
    String -/- [\35]