module Haskell-Statements
exports
  context-free syntax
    "do" StmtList 	    -> Exp 	{cons("Do")}
    Pat "<-" Exp 	-> Stmt 	{cons("BindStmt")}
    Exp               	-> Stmt 	{cons("ExpStmt")}
    "let" Declbinds   	-> Stmt 	{cons("LetStmt")}
    Qvar "=" Exp 	-> Fbind	{cons("FBind")}

  context-free syntax
  	NoOffsideStmtBlock -> StmtList {cons("StmtList")}
  	OffsideStmtList   -> StmtList {cons("StmtList")}
  	
    "{" NoOffsideStmtList "}"  -> NoOffsideStmtBlock {bracket, ignore-indent}

  context-free priorities
    Stmt -> NoOffsideStmt
  >
    NoOffsideStmt ";" -> NoOffsideStmt
%%  >
%%    ";" NoOffsideStmt -> NoOffsideStmt

  context-free syntax
    NoOffsideStmt -> NoOffsideStmtList
    NoOffsideStmt ";" NoOffsideStmtList -> NoOffsideStmtList {cons("StmtSeq")}


  context-free priorities
    Stmt -> OffsideStmt {layout(gt(col(left(1)), col(first(1))))}
  >
    OffsideStmt ";" -> OffsideStmt {layout(gt(col(first(2)), col(first(1))))}
%%  >
%%    ";" OffsideStmt -> OffsideStmt {layout(gt(col(first(2)), col(first(1))))}
  >
    Stmt ";" OffsideStmt -> OffsideStmt
          {cons("StmtSeq"),
           layout(and(gt(col(left(1)), col(first(1))),
                  and(gt(col(first(2)), col(first(1))),
                      gt(col(first(3)), col(first(1))))))}
  
  context-free syntax
    OffsideStmt -> OffsideStmtList
    OffsideStmtNEWLINE OffsideStmtList -> OffsideStmtList {cons("StmtSeq"), layout(eq(col(first(1)), col(first(2))))}

    OffsideStmt NEWLINE -> OffsideStmtNEWLINE {ast("<1>")}
