module GHC-GADTs

imports Haskell-Syntax
imports GHC-ExistentialQuantification
imports GHC-KindSignature

exports
	
	context-free syntax
	
		"data" GADTBody    				-> Topdecl {cons("GADTData")}
	%%	"newtype" GADTBody 				-> Topdecl {cons("GADTNewType")}
	%%	"data" "instance" GADTBody		-> Topdecl {cons("GADTDataInstance")}
	%%	"newtype" "instance" GADTBody 	-> Topdecl {cons("GADTNewTypeInstance")}
		
	%%	"data" GADTBody					-> Decl {cons("GADTDataDecl")}
	%%	"newtype" GADTBody				-> Decl {cons("GADTDataDecl")}
		
	
		"{" "}" -> WTFBrackets
				-> WTFBrackets
		Context? Type OptKindSig GADTConstrList Deriving WTFBrackets-> GADTBody
		Context? Type OptKindSig -> GADTBody {reject}
	
		Con+ "::" Context? Type		-> GADTConstr {cons("GADTConstraint")}
		
	%% Implementation of layout sensitive and layout insensitive 
	%% GADT Contraints where definitions is analogeos to statment list
	%% definition ind Haskell-Statements
	%% This definition cannot be reused because only GADTConstraints are
	%% allowed in the where after a GADT Data definition
	
	context-free priorities
		GADTConstr		-> NoOffsideGADTConstr
	>
		NoOffsideGADTConstr ";" -> NoOffsideGADTConstr
		
	context-free syntax
	
		NoOffsideGADTConstr	 		-> GADTNoOffsideConstrs
		NoOffsideGADTConstr ";" GADTNoOffsideConstrs -> GADTNoOffsideConstrs {cons("GADTConstrSeq")}
		"{" GADTNoOffsideConstrs "}" -> GADTNoOffsideConstrsBlock {bracket, ignore-layout}
		
	context-free priorities
		
		GADTConstr						-> GADTOffsideConstr { layout("1.first.col < 1.left.col")}
	>
		GADTOffsideConstr ";"			-> GADTOffsideConstr {layout("1.first.col < 2.first.col")}
	>
		GADTOffsideConstr ";" GADTConstr -> GADTOffsideConstr  {cons("GADTConstrSeq"),
          layout("1.first.col < 2.first.col && 1.first.col < 3.first.col && 1.first.col < 3.left.col")}
	
	context-free syntax
	
		GADTOffsideConstr 			->	GADTOffsideConstrs
		GADTOffsideConstrNEWLINE GADTOffsideConstrs -> GADTOffsideConstrs {cons("GADTConstrSeq"), layout("1.first.col == 2.first.col")}
		GADTOffsideConstr LAYOUT? -> GADTOffsideConstrNEWLINE  {enforce-newline}
		
	%% Definition of the where
	
		"where" GADTNoOffsideConstrsBlock		-> GADTConstrList {cons("GADTConstrList")}
		"where" GADTOffsideConstrs				-> GADTConstrList {cons("GADTConstrList")}
		"where"	("{" "}")?						-> GADTConstrList {cons("EmptyGADTConstrList")}
												-> GADTConstrList {cons("EmptyGADTConstrList")}
		