module GHC-ExplicitForAll

imports Haskell-Syntax

exports

	context-free syntax
		"forall"				-> FORALL {cons("FORALL")}
		FORALL Var+ "."		-> Forall {cons("Forall")}
		Forall CType -> CType {cons("ExplicitForAll")}
		
	context-free priorities
%%		Qvar "@" Exp -> Exp {cons("Named")}
 %% 	  > Exp "::" Forall Context? Type  -> Exp {cons("ExplicitForAllTyped")}

	lexical syntax
		"forall" -> ReservedId
		
	lexical restrictions
		"forall" -/- [a-zA-Z0-9\'\_]