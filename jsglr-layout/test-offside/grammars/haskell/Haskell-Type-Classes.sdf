module Haskell-Type-Classes

imports Haskell-Identifier-Sorts
		Haskell-Operators

exports
	
  context-free syntax
    "class" SContext? Tycls Tyvar MaybeWhere 		-> Topdecl {cons("Class")}
    "instance" SContext? Qtycls Inst* MaybeWhere 		-> Topdecl {cons("Instance")}
    "instance" SContext? "(" Qtycls Inst* ")" MaybeWhere    -> Topdecl {cons("Instance")}
    "default"  "(" {Type ","}* ")" 	-> Topdecl {cons("Default")}

    Gtycon -> Inst {cons("InstCons")}
    "(" Gtycon Tyvar* ")" -> Inst {cons("InstApp")}
    "(" Tyvar "," {Tyvar ","}+ ")" -> Inst {cons("InstTuple")}
    "[" Tyvar "]" -> Inst {cons("InstList")}
    "(" Tyvar RightArrowOp Tyvar ")" -> Inst {ast("InstArrow(<1>,<3>)")}
    
    Class RightDoubleArrowOp						-> Context {ast("Context(<1>)")}
    "(" {Class ","}* ")" RightDoubleArrowOp			-> Context {ast("Context(<1>)")}
    SimpleClass RightDoubleArrowOp					-> SContext {ast("SContext(<1>)")}
    "(" {SimpleClass ","}* ")" RightDoubleArrowOp	-> SContext {ast("SContext(<1>)")}

    
    Qtycls Tyvar -> SimpleClass {cons("SimpleClass")}
    SimpleClass -> Class
    Qtycls "(" Tyvar AType+ ")" -> Class {cons("Class")}
    
