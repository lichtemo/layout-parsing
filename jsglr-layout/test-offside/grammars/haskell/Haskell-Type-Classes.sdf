module Haskell-Type-Classes

imports Haskell-Identifier-Sorts

exports
	sorts
		FunctionalDependencies
		ClassParameter
	
  context-free syntax
    "class" SContext? Tycls ClassParameter FunctionalDependencies MaybeWhere 		-> Topdecl {cons("Class")}
    "instance" SContext? Qtycls Inst* MaybeWhere 		-> Topdecl {cons("Instance")}
    "instance" SContext? "(" Qtycls Inst* ")" MaybeWhere    -> Topdecl {cons("Instance")}
    "default"  "(" {Type ","}* ")" 	-> Topdecl {cons("Default")}

    Gtycon -> Inst {cons("InstCons")}
    "(" Gtycon Tyvar* ")" -> Inst {cons("InstApp")}
    "(" Tyvar "," {Tyvar ","}+ ")" -> Inst {cons("InstTuple")}
    "[" Tyvar "]" -> Inst {cons("InstList")}
    "(" Tyvar "->" Tyvar ")" -> Inst {cons("InstArrow")}
    
    Class "=>"              -> Context {cons("Context")}
    "(" {Class ","}* ")" "=>"     -> Context {cons("Context")}
    SimpleClass "=>"              -> SContext {cons("SContext")}
    "(" {SimpleClass ","}* ")" "=>"     -> SContext {cons("SContext")}

    
    Qtycls Tyvar -> SimpleClass {cons("SimpleClass")}
    SimpleClass -> Class
    Qtycls "(" Tyvar AType+ ")" -> Class {cons("Class")}
    
    -> FunctionalDependencies {cons("NoDependencies")}
    Tyvar -> ClassParameter
    
