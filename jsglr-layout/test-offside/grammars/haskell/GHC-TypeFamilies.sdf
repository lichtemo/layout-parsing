module GHC-TypeFamilies

	imports GHC-EqualityConstraints
	imports GHC-KindSignature
	imports Haskell-Syntax

	exports
	
		context-free syntax
		
			"type" "family" Type OptKindSig	-> TopDecl {cons("TypeFamily")}
			"data" "family" Type OptKindSig	-> TopDecl {cons("DataFamily")}
			"type" Type OptKindSig			-> Decl {cons("TypeFamily")}
			"data" Type OptKindSig			-> Decl {cons("DataFamily")}
			"type" "instance" Type "=" CType -> Decl {cons("TypeInstDecl")}
			"data" "instance" Context? Type "=" Constrs Deriving  -> Decl {cons("DataInstDecl")}
			"newtype" "instance" Context? Type "=" Constrs Deriving  -> Decl {cons("NewTypeInstDecl")}
		lexical syntax
			"family" -> ReservedId0
		
		lexical restrictions
			"family" -/- [a-zA-Z0-9\'\_]