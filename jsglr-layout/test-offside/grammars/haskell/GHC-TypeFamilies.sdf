module GHC-TypeFamilies

	imports GHC-EqualityConstraints
	imports Haskell-Syntax

	exports
	
		context-free syntax
		
			"type" "family" Type OptSig	-> TopDecl {cons("TypeFamily")}
			"data" "family" Type OptSig	-> TopDecl {cons("DataFamily")}
			"type" Type OptSig			-> Decl {cons("TypeFamily")}
			"data" Type OptSig			-> Decl {cons("DataFamily")}
			"type" Type "=" Type	  	-> Decl {cons("TypeDecl")}
			"*" 						-> Type {cons("LiftedType")}
		
		lexical syntax
			"family" -> ReservedId0
		
		lexical restrictions
			"family" -/- [a-zA-Z0-9\'\_]