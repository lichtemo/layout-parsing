module Haskell-Case-Alternatives
exports
  context-free syntax
    Pat "->" Exp MaybeWhere 	-> Alt   {cons("Alt")}

    Pat Gdpat+ MaybeWhere	 	-> Alt   {cons("GdAlt")}
    "|" Exp "->" Exp                  -> Gdpat {cons("GdPat")}
    
    Alt ";" -> Alt

  context-free syntax
  	NoOffsideAltList -> AltList {cons("AltList")}
  	OffsideAltList   -> AltList {cons("AltList")}
  	
    {Alt ";"}+               -> InternalAltList
    "{" InternalAltList "}"  -> NoOffsideAltList {bracket, ignore-block}
    
    Alt    -> OffsideAlt {layout(gt(col(left(1)), col(first(1))))}
    Alt ";" OffsideAlt -> OffsideAlt {flatten,
           layout(and(gt(col(left(1)), col(first(1))),
                  and(gt(col(first(2)), col(first(1))),
                      gt(col(first(3)), col(first(1))))))}
    
    OffsideAlt* -> OffsideAltList {layout(all(1, "x", eq(col(first(1)), col(first("x")))))}
